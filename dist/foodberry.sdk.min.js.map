{"version":3,"sources":["src/node_modules/browser-pack/_prelude.js","src/src/card.js","src/src/config.js","src/src/core.js","src/src/enums.js","src/src/index.js","src/src/nutritionCard.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","enums","Card","_classCallCheck","this","_createClass","key","value","target","dataPromise","container","document","createElement","className","title","innerHTML","credit","querySelector","appendChild","then","data","list","nutritionInfo","listItem","displayName","nutrientsEnum","unit","unitOfMeasure","append","testing","_id","API_BASE_URL","NutritionCard","Core","_this","addEventListener","event","init","_this2","cardElements","getCardElements","Array","from","forEach","httpElement","initCard","getElementsByTagName","cardType","getAttribute","attributes","dataset","_card","_nutrientsEnum","protein","totalFat","calories","_defineProperty","SDK","window","Foodberry","config","_Card","options","arguments","undefined","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","recipeUrl","url","location","href","getNutritionSummary","renderCardShell","_inherits","api","edge","baseUrl","queryString","convertDictionaryToQueryString","Promise","resolve","reject","req","XMLHttpRequest","open","setRequestHeader","onload","status","JSON","parse","response","statusText","onerror","send","params","keys","map","join"],"mappings":"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","file":"foodberry.sdk.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","const enums = require('./enums');\n\nmodule.exports = class Card {\n\n    constructor() {\n\n    }\n\n    /**\n     * Render Card\n     * @param type 'nutrition', 'calories', etc\n     * @param target\n     * @param dataPromise\n     */\n    renderCardShell(target, dataPromise) {\n\n        let container = document.createElement('div');\n        container.className = 'foodberry-card nutrition-card';\n        let title = document.createElement('div');\n        title.className = 'card-title'\n        title.innerHTML = 'Nutritional Details';\n        let credit = document.createElement('div');\n        credit.className = 'credit';\n        credit.innerHTML = 'Provided by <a href=\"http://foodberry.com\">Foodberry.com</a>';\n        target = typeof target === 'string' ? document.querySelector(target) : target;\n        if (target) {\n\n            target.appendChild(container);\n            container.appendChild(title);\n\n            dataPromise.then(data => {\n                let list = document.createElement('ul');\n                list.className = 'nutrients';\n                for (let key in data) {\n                    const nutritionInfo = data[key];\n                    let listItem = document.createElement('li');\n                    let displayName = enums.nutrientsEnum[key] ? enums.nutrientsEnum[key].displayName : key;\n                    let unit = enums.nutrientsEnum[key] ? enums.nutrientsEnum[key].unitOfMeasure : '';\n                    listItem.innerHTML = '<span class=\"nutrient-name\">'+displayName+'</span><span class=\"nutrient-value\">'+nutritionInfo+' ('+ unit +')</span>';\n                    list.append(listItem);\n                }\n                container.appendChild(list);\n                container.appendChild(credit);\n\n                // for testing\n                let testing = document.createElement('div');\n                testing.className = 'testing';\n                testing.innerHTML = '<a href=\"https://foodapis.azurewebsites.net/portal/recipe-cards/nutrition/'+data._id+'\">edit</a>';\n                container.appendChild(testing);\n            });\n        }\n\n\n    }\n\n}","module.exports = {\n    API_BASE_URL: 'https://foodapis.azurewebsites.net'\n    // API_BASE_URL: 'http://localhost:9999'\n}","const NutritionCard = require('./nutritionCard');\n\nclass Core {\n\n    constructor() {\n\n        document.addEventListener(\"DOMContentLoaded\", (event) => {\n            this.init();\n        });\n\n    }\n\n    init(key) {\n\n        const cardElements = this.getCardElements();\n        Array.from(cardElements).forEach(httpElement => {\n            this.initCard(httpElement);\n        });\n\n    }\n\n    // Return all recipe-card elements\n    getCardElements() {\n        const cards = document.getElementsByTagName('recipe-card');\n        return cards;\n    }\n\n    initCard(httpElement) {\n\n        const cardType = httpElement.getAttribute('data-type');\n        const attributes = httpElement.dataset;\n\n        switch (cardType) {\n            case 'nutrition':\n                httpElement._card = new NutritionCard(httpElement, attributes);\n            default:\n                return;\n        }\n    }\n\n}\n\nmodule.exports = new Core();","module.exports = {\n\n    nutrientsEnum : {\n        'protein' : { unitOfMeasure: 'g', displayName: 'Protein' },\n        'totalFat' : { unitOfMeasure: 'g', displayName: 'Fat' },\n        'calories' : { unitOfMeasure: 'cal', displayName: 'Calories' },\n        'protein' : { unitOfMeasure: 'g', displayName: 'Protein' },\n        'carbohydrate' : { unitOfMeasure: 'g', displayName: 'Carbohydrates' },\n        'fiber' : { unitOfMeasure: 'g', displayName: 'Fiber' },\n        'sugars' : { unitOfMeasure: 'g', displayName: 'Sugar' },\n        'sodium' : { unitOfMeasure: 'mg', displayName: 'Sodium' },\n        'cholesterol' : { unitOfMeasure: 'mg', displayName: 'Cholesterol' }\n    }\n\n}\n","// Dependencies\nconst NutritionCard = require('./nutritionCard');\nconst Core = require('./core');\n\nconst SDK = {\n    Core: Core,\n    NutritionCard: NutritionCard\n}\n\nwindow.Foodberry = window.Foodberry || {};\nwindow.Foodberry.SDK = SDK;\n\nmodule.exports = SDK;","const config = require('./config');\nconst Card = require('./card');\n\nmodule.exports = class NutritionCard extends Card {\n\n    /**\n     * Constructor\n     * target: queryexpression\n     * url: recipeUrl || current url (default)\n     * data: calories || details\n     * @param url\n     */\n    constructor(target, options = {}) {\n\n        super();\n\n        const recipeUrl = options.url || location.href;\n        const dataPromise = this.getNutritionSummary({\n            url: recipeUrl\n        });\n\n        this.renderCardShell(target, dataPromise);\n\n    }\n\n\n    getNutritionSummary(options) {\n        return this.api('nutrition/summary', options);\n    }\n\n    /**\n     * Get Calories Count Data\n     * @returns {Promise}\n     */\n    getCalorieCount(options) {\n        return this.api('nutrition/calories', options);\n    }\n\n    /**\n     * API Request\n     * @returns {Promise}\n     */\n    api(edge, options) {\n\n        const baseUrl = config.API_BASE_URL;\n        const queryString = this.convertDictionaryToQueryString(options);\n        const url = baseUrl + \"/\" + edge + queryString\n\n        return new Promise((resolve, reject) => {\n\n            let req = new XMLHttpRequest();\n            req.open('GET', url);\n            req.setRequestHeader(\"Content-Type\", \"application/json\");\n\n            req.onload = function() {\n                if (req.status === 200) {\n                    // Resolve the promise with the response text\n                    resolve(JSON.parse(req.response).data);\n                }\n                else {\n                    reject(Error(req.statusText));\n                }\n            };\n\n            req.onerror = function() {\n                reject(Error(\"Network Error\"));\n            };\n\n            req.send();\n\n        });\n\n    }\n\n\n    convertDictionaryToQueryString(params) {\n        return \"?\" + Object\n                .keys(params)\n                .map(function(key){\n                    return key+\"=\"+params[key]\n                })\n                .join(\"&\")\n    }\n\n\n}\n\n"]}